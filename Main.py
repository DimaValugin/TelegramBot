from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from Functions import scan_id, nakrutka, my_profile, support_client, my_orders, is_number, add_check, \
    get_check, User_money, Set_money, delete_check, new_history, my_history, Start_order, handle_services_id, \
    handle_phone, Services_DB, delete_bad_check
from Config import TOKEN, Qiwi_Token
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from pyqiwip2p import QiwiP2P
import random
import Markups
from datetime import datetime

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot,
                storage=storage)
p2p = QiwiP2P(auth_key=Qiwi_Token)


class OrderStatesGroup(StatesGroup):
    phone = State()
    link = State()


class Money(StatesGroup):
    start_refill = State()
    refill = State()


@dp.message_handler(commands=['start'])
async def start(message):
    await scan_id(message, message.from_user.id)


@dp.message_handler(commands=['money'], state=None)
async def start_message(message: types.Message):
    await bot.send_message(message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è')
    await Money.start_refill.set()


@dp.message_handler(commands=['cancel'], state='*')
async def cancel(message: types.Message, state: FSMContext):
    if state is None:
        return
    await state.finish()
    await message.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω',
                         reply_markup=Markups.MainMenu)


@dp.message_handler(content_types=['text'])
async def bot_message(message: types.Message):
    if message.text == '–ù–∞–∫—Ä—É—Ç–∫–∞':
        await nakrutka(message)

    elif message.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        await my_profile(message.from_user.id)

    elif message.text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å':
        await bot.send_message(message.from_user.id, '–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /money')

    elif message.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞':
        await support_client(message)

    elif message.text == '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π':
        await my_history(message, message.from_user.id)

    elif message.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã':
        await my_orders(message, message.from_user.id)


@dp.message_handler(content_types=['photo', 'audio', 'document', 'sticker', 'video', 'voice'])
async def get_pictures(message):
    await bot.send_message(message.chat.id, text='–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å')


@dp.message_handler(state=Money.start_refill)
async def bot_message(message: types.Message, state: FSMContext):
    if message.chat.type == "private":
        if is_number(message.text):
            message_money = int(message.text)
            if message_money >= 5:
                comment = str(message.from_user.id) + "-" + str(random.randint(1000, 9999))
                bill = p2p.bill(amount=message_money, lifetime=15, comment=comment)

                add_check(message.from_user.id, message_money, bill.bill_id)

                await bot.send_message(message.from_user.id, f"–í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {message_money} —Ä—É–±. –Ω–∞ –Ω–∞—à "
                                                             f"Qiwi\n–°—Å—ã–ª–∫—É: {bill.pay_url}\n–£–∫–∞–∑–∞–≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫"
                                                             f" –æ–ø–ª–∞—Ç–µ: {comment}",
                                       reply_markup=Markups.buy_menu(url=bill.pay_url, bill=bill.bill_id))
                await bot.send_message(message.from_user.id,
                                       '–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ/–ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è')
                await Money.next()

            else:
                await bot.send_message(message.from_user.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã')

        else:
            await bot.send_message(message.from_user.id, '–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ')


@dp.callback_query_handler(text='add_money_qiwi')
async def add_money_qiwi(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")


@dp.callback_query_handler(text_contains='check_', state=Money.refill)
async def answer(callback: types.CallbackQuery, state: FSMContext):
    bill = str(callback.data[6:])
    info = get_check(callback.from_user.id)
    if info is not False:
        if str(p2p.check(bill_id=bill).status) == "PAID":
            user_money = User_money(callback.from_user.id)
            money = int(info[2])
            date = str(datetime.now().strftime("%d-%m-%Y %H:%M"))
            Set_money(callback.from_user.id, user_money + money)
            new_history(callback.from_user.id, money, date)
            delete_check(bill)
            await bot.send_message(callback.from_user.id, text='–í–∞—à —Å—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω!\n'
                                                               '–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"')
            await state.finish()

        else:
            await bot.send_message(callback.from_user.id, text='–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç!',
                                   reply_markup=Markups.buy_menu(False, bill=bill))
    else:
        await bot.send_message(callback.from_user.id, text='–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')


@dp.callback_query_handler(text='stop_money', state=Money.refill)
async def stop_money(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    delete_bad_check(callback.message.chat.id)
    await bot.send_message(callback.from_user.id, text='–ü—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–∫—Ä–∞—â–µ–Ω')


@dp.callback_query_handler(text_contains='SN_')
async def answer(callback: types.CallbackQuery):
    if callback.data == 'SN_youtube':
        await bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏ –¥–ª—è YouTube',

                               reply_markup=Markups.YouTube_inline
                               )

    elif callback.data == 'SN_telegram':
        await bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥–∏ –¥–ª—è Telegram',
                               reply_markup=Markups.Telegram_inline
                               )


@dp.callback_query_handler(text='list_of_services')
async def answer(callback: types.CallbackQuery):
    await bot.send_message(callback.message.chat.id, 'üìà –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –Ω–∞–∫—Ä—É—Ç–∫–∏',

                           reply_markup=Markups.Service_Name_inline
                           )


@dp.callback_query_handler(text_contains='YouTube_')
async def services(callback: types.CallbackQuery):
    if callback.data == 'YouTube_like':
        await Services_DB(callback.message, id=1)

    elif callback.data == 'YouTube_sub':
        await Services_DB(callback.message, id=2)


@dp.callback_query_handler(text_contains='Telegram_')
async def answer(callback: types.CallbackQuery):
    if callback.data == 'Telegram_sub':
        await Services_DB(callback.message, id=3)

    elif callback.data == 'Telegram_view':
        await Services_DB(callback.message, id=4)


@dp.callback_query_handler(text='You_111')
async def order_111(callback: types.CallbackQuery, state: FSMContext):
    await Start_order(callback, state, id=1)


@dp.callback_query_handler(text='You_121')
async def order_121(callback: types.CallbackQuery, state: FSMContext):
    await Start_order(callback, state, id=2)


@dp.callback_query_handler(text='Tel_221')
async def order_221(callback: types.CallbackQuery, state: FSMContext):
    await Start_order(callback, state, id=3)


@dp.callback_query_handler(text='Tel_231')
async def order_231(callback: types.CallbackQuery, state: FSMContext):
    await Start_order(callback, state, id=4)


@dp.message_handler(state=OrderStatesGroup.phone)
async def Youtube_order_phone1(message: types.Message, state: FSMContext):
    await handle_services_id(message, state)


@dp.message_handler(state=OrderStatesGroup.link)
async def Youtube_order_link1(message: types.Message, state: FSMContext):
    await handle_phone(message, state)


executor.start_polling(dp, skip_updates=True)
